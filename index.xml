<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wright Development</title>
    <link>https://wright-development.github.io/</link>
    <description>Recent content on Wright Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Wright Development &amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 05 Oct 2017 19:33:35 -0600</lastBuildDate>
    
	<atom:link href="https://wright-development.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API Testing In .NET with Expected.Request</title>
      <link>https://wright-development.github.io/post/api-testing-in-dotnet/</link>
      <pubDate>Thu, 05 Oct 2017 19:33:35 -0600</pubDate>
      
      <guid>https://wright-development.github.io/post/api-testing-in-dotnet/</guid>
      <description>Alright, let&amp;rsquo;s get started with the question that I&amp;rsquo;m sure you are all asking, what is Expected.Request? Simply put it&amp;rsquo;s a Fluent API I&amp;rsquo;ve created to test REST APIs, and even better it&amp;rsquo;s open source! Woot! Expected.Request abstracts away the HttpClient class in favor of clear and cohesive chaining. If you would like to see the full documentation for this package check that out here, otherwise let&amp;rsquo;s jump into some examples.</description>
    </item>
    
    <item>
      <title>Using Docker for .NET Core Integration Testing</title>
      <link>https://wright-development.github.io/post/using-docker-for-net-core/</link>
      <pubDate>Sat, 16 Sep 2017 13:39:28 -0600</pubDate>
      
      <guid>https://wright-development.github.io/post/using-docker-for-net-core/</guid>
      <description>Recently at work, we have been discussing how to perform integration tests on .NET Core services. From previous experience, integration testing can be quite a messy process especially when performing reads and writes to a database. Have you ever had an issue with maintaining consistently correct data? Sharing a database with multiple developers? Or even setting up your own data without interfering with your teammates? If any of these problems sound familiar, then docker can be the solution for you.</description>
    </item>
    
  </channel>
</rss>